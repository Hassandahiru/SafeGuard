{
  "info": {
    "name": "SafeGuard Enhanced Authentication API",
    "description": "Enhanced authentication and user registration system for SafeGuard with Resident Approval Workflow",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üöÄ New Customer Registration (Self-Service)",
      "description": "Public registration flow for new customers - no super admin required",
      "item": [
        {
          "name": "Register Your Building (Free 30-Day Trial)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Your Building Name\",\n  \"address\": \"Your Building Address\",\n  \"city\": \"Your City\",\n  \"state\": \"Your State\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"12345\",\n  \"buildingPhone\": \"+234XXXXXXXXXX\",\n  \"buildingEmail\": \"info@yourbuilding.com\",\n  \"website\": \"https://yourbuilding.com\",\n  \"totalLicenses\": 100,\n  \"adminEmail\": \"admin@yourbuilding.com\",\n  \"adminPassword\": \"YourSecurePassword123!\",\n  \"adminFirstName\": \"Your First Name\",\n  \"adminLastName\": \"Your Last Name\",\n  \"adminPhone\": \"+234XXXXXXXXXX\",\n  \"adminApartment\": \"ADMIN-001\",\n  \"companyName\": \"Your Company Ltd\",\n  \"contactEmail\": \"contact@yourbuilding.com\",\n  \"contactPhone\": \"+234XXXXXXXXXX\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/register-building",
              "host": ["{{baseUrl}}"],
              "path": ["api", "register-building"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('newCustomerBuildingId', data.building.id);",
                  "    pm.environment.set('newCustomerAdminId', data.admin.id);",
                  "    pm.environment.set('newCustomerAdminEmail', data.admin.email);",
                  "    ",
                  "    console.log('üéâ WELCOME TO SAFEGUARD! üéâ');",
                  "    console.log('‚úÖ Your building has been registered successfully!');",
                  "    console.log('');",
                  "    console.log('üìã REGISTRATION DETAILS:');",
                  "    console.log('üè¢ Building:', data.building.name);",
                  "    console.log('üìç Location:', data.building.city + ', ' + data.building.state);",
                  "    console.log('üë§ Admin:', data.admin.first_name + ' ' + data.admin.last_name);",
                  "    console.log('üìß Admin Email:', data.admin.email);",
                  "    console.log('üéØ License Plan:', data.license.plan_type);",
                  "    console.log('');",
                  "    console.log('üéÅ TRIAL INFORMATION:');",
                  "    console.log('‚è∞ Trial Period:', data.trial_info.trial_period_days + ' days');",
                  "    console.log('üìÖ Trial Expires:', new Date(data.trial_info.expires_at).toLocaleDateString());",
                  "    console.log('üéâ Features Included:', data.trial_info.features_included.join(', '));",
                  "    console.log('');",
                  "    console.log('üìã YOUR NEXT STEPS:');",
                  "    data.trial_info.next_steps.forEach((step, index) => {",
                  "        console.log(`   ${index + 1}. ${step}`);",
                  "    });",
                  "    console.log('');",
                  "    console.log('üí° TIP: Login with your admin credentials to access the dashboard!');",
                  "    ",
                  "    pm.test('Building registration successful', function () {",
                  "        pm.expect(data.admin.role).to.eql('building_admin');",
                  "        pm.expect(data.license.plan_type).to.eql('standard');",
                  "        pm.expect(data.license.amount).to.eql('0.00');",
                  "        pm.expect(data.trial_info.trial_period_days).to.eql(30);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå REGISTRATION FAILED');",
                  "    const response = pm.response.json();",
                  "    console.log('Error:', response.error?.message || 'Unknown error');",
                  "    if (response.error?.details) {",
                  "        console.log('Details:', response.error.details);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Building Management (Admin)",
      "item": [
        {
          "name": "1. Initial System Setup (First Building + Super Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"SafeGuard Headquarters\",\n  \"address\": \"123 Tech Hub Street, Victoria Island\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"101001\",\n  \"buildingPhone\": \"+2348000000000\",\n  \"buildingEmail\": \"info@safeguard.com\",\n  \"website\": \"https://safeguard.com\",\n  \"totalLicenses\": 500,\n  \"securityLevel\": 5,\n  \"adminEmail\": \"superadmin@safeguard.com\",\n  \"adminPassword\": \"SuperSecure123!\",\n  \"adminFirstName\": \"Super\",\n  \"adminLastName\": \"Admin\",\n  \"adminPhone\": \"+2348000000001\",\n  \"adminApartment\": \"SUPER-ADMIN\",\n  \"licenseData\": {\n    \"planType\": \"enterprise\",\n    \"durationMonths\": 12,\n    \"amount\": 0,\n    \"currency\": \"NGN\",\n    \"paymentReference\": \"INITIAL_SETUP\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/initial-setup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "initial-setup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('superAdminToken', data.accessToken);",
                  "    pm.environment.set('superAdminId', data.user.id);",
                  "    pm.environment.set('headquartersBuildingId', data.user.building_id);",
                  "    ",
                  "    console.log('‚úÖ INITIAL SYSTEM SETUP SUCCESSFUL');",
                  "    console.log('üè¢ Building:', data.building?.name);",
                  "    console.log('üë§ Super Admin:', data.user.first_name + ' ' + data.user.last_name);",
                  "    console.log('üîê Super Admin Token captured');",
                  "    ",
                  "    pm.test('Initial setup completed successfully', function () {",
                  "        pm.expect(data.user.role).to.eql('super_admin');",
                  "        pm.expect(data.accessToken).to.not.be.empty;",
                  "        pm.expect(data.building).to.not.be.undefined;",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå INITIAL SETUP FAILED');",
                  "    console.log('Response:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Self-Service Building Registration (New Customer)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Luxury Gardens Estate\",\n  \"address\": \"Plot 123, Maitama District\",\n  \"city\": \"Abuja\",\n  \"state\": \"FCT\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"90001\",\n  \"buildingPhone\": \"+2348054321000\",\n  \"buildingEmail\": \"info@luxurygardens.com\",\n  \"website\": \"https://luxurygardens.com\",\n  \"totalLicenses\": 150,\n  \"adminEmail\": \"admin@luxurygardens.com\",\n  \"adminPassword\": \"LuxuryAdmin2025!\",\n  \"adminFirstName\": \"Sarah\",\n  \"adminLastName\": \"Johnson\",\n  \"adminPhone\": \"+2348054321001\",\n  \"adminApartment\": \"ADMIN-SUITE\",\n  \"companyName\": \"Luxury Gardens Development Ltd\",\n  \"contactEmail\": \"contact@luxurygardens.com\",\n  \"contactPhone\": \"+2348054321002\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/register-building",
              "host": ["{{baseUrl}}"],
              "path": ["api", "register-building"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('selfServiceBuildingId', data.building.id);",
                  "    pm.environment.set('selfServiceAdminId', data.admin.id);",
                  "    pm.environment.set('selfServiceAdminEmail', data.admin.email);",
                  "    ",
                  "    console.log('‚úÖ SELF-SERVICE BUILDING REGISTRATION SUCCESSFUL');",
                  "    console.log('üè¢ Building:', data.building.name);",
                  "    console.log('üìç Location:', data.building.city + ', ' + data.building.state);",
                  "    console.log('üë§ Admin:', data.admin.first_name + ' ' + data.admin.last_name);",
                  "    console.log('üìß Admin Email:', data.admin.email);",
                  "    console.log('üéØ License Plan:', data.license.plan_type);",
                  "    console.log('‚è∞ Trial Period:', data.trial_info.trial_period_days + ' days');",
                  "    console.log('üìÖ Trial Expires:', data.trial_info.expires_at);",
                  "    console.log('üéÅ Trial Features:', data.trial_info.features_included.join(', '));",
                  "    console.log('');",
                  "    console.log('üìã NEXT STEPS:');",
                  "    data.trial_info.next_steps.forEach((step, index) => {",
                  "        console.log(`   ${index + 1}. ${step}`);",
                  "    });",
                  "    ",
                  "    pm.test('Self-service registration completed successfully', function () {",
                  "        pm.expect(data.admin.role).to.eql('building_admin');",
                  "        pm.expect(data.license.plan_type).to.eql('standard');",
                  "        pm.expect(data.license.amount).to.eql('0.00');",
                  "        pm.expect(data.trial_info.trial_period_days).to.eql(30);",
                  "        pm.expect(data.building.settings.registration_type).to.eql('self_service');",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå SELF-SERVICE REGISTRATION FAILED');",
                  "    console.log('Response:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Register New Building (Super Admin - Dantata Estate)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{superAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Dantata Estate Kubwa\",\n  \"address\": \"Kubwa by train station, Abuja\",\n  \"city\": \"Abuja\",\n  \"state\": \"FCT\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"90211\",\n  \"phone\": \"+2348012300000\",\n  \"email\": \"dantata@dantatagroup.com\",\n  \"website\": \"https://dantatagroup.com\",\n  \"totalLicenses\": 200,\n  \"securityLevel\": 3,\n  \"adminEmail\": \"admin@dantatagroup.com\",\n  \"adminPassword\": \"Qwerty@123\",\n  \"adminFirstName\": \"Moses\",\n  \"adminLastName\": \"Amos\",\n  \"adminPhone\": \"+2348012345001\",\n  \"adminApartment\": \"ADMIN-001\",\n  \"licenseData\": {\n    \"planType\": \"standard\",\n    \"durationMonths\": 12,\n    \"amount\": 50000,\n    \"currency\": \"NGN\",\n    \"paymentReference\": \"DANTATA_2025_001\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('dantataEstateId', data.building.id);",
                  "    pm.environment.set('dantataAdminId', data.admin.id);",
                  "    ",
                  "    console.log('‚úÖ DANTATA ESTATE REGISTERED SUCCESSFULLY');",
                  "    console.log('üè¢ Building:', data.building.name);",
                  "    console.log('üìç Location:', data.building.city + ', ' + data.building.state);",
                  "    console.log('üë§ Admin:', data.admin.first_name + ' ' + data.admin.last_name);",
                  "    console.log('üìß Admin Email:', data.admin.email);",
                  "    console.log('üÜî Building ID:', data.building.id);",
                  "    console.log('üé´ License Key:', data.license.license_key);",
                  "    console.log('üìä Total Licenses:', data.license.total_licenses);",
                  "    ",
                  "    pm.test('Dantata Estate registered successfully', function () {",
                  "        pm.expect(data.building.name).to.include('Dantata');",
                  "        pm.expect(data.admin.role).to.eql('building_admin');",
                  "        pm.expect(data.license.status).to.eql('active');",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå DANTATA ESTATE REGISTRATION FAILED');",
                  "    console.log('Error:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Register New Building (Southside Beach Estates)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{superAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Southside Beach Estates\",\n  \"address\": \"3rd Avenue Gwarinpa\",\n  \"city\": \"Abuja\",\n  \"state\": \"FCT\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"90210\",\n  \"phone\": \"+2347078650000\",\n  \"email\": \"info@southside.com\",\n  \"website\": \"https://southsideestates.com\",\n  \"totalLicenses\": 100,\n  \"securityLevel\": 2,\n  \"adminEmail\": \"admin@southside.com\",\n  \"adminPassword\": \"SouthsideAdmin2024!\",\n  \"adminFirstName\": \"Musa\",\n  \"adminLastName\": \"Danjuma\",\n  \"adminPhone\": \"+2347078651490\",\n  \"adminApartment\": \"ADMIN-PG01\",\n  \"licenseData\": {\n    \"planType\": \"standard\",\n    \"durationMonths\": 6,\n    \"amount\": 25000,\n    \"currency\": \"NGN\",\n    \"paymentReference\": \"SOUTHSIDE_2025_001\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('southsideEstateId', data.building.id);",
                  "    pm.environment.set('southsideAdminId', data.admin.id);",
                  "    ",
                  "    console.log('‚úÖ SOUTHSIDE BEACH ESTATES REGISTERED SUCCESSFULLY');",
                  "    console.log('üè¢ Building:', data.building.name);",
                  "    console.log('üìç Location:', data.building.city + ', ' + data.building.state);",
                  "    console.log('üë§ Admin:', data.admin.first_name + ' ' + data.admin.last_name);",
                  "    console.log('üìß Admin Email:', data.admin.email);",
                  "    console.log('üÜî Building ID:', data.building.id);",
                  "    console.log('üé´ License Key:', data.license.license_key);",
                  "    console.log('üìä Total Licenses:', data.license.total_licenses);",
                  "    ",
                  "    pm.test('Southside Estate registered successfully', function () {",
                  "        pm.expect(data.building.name).to.include('Southside');",
                  "        pm.expect(data.admin.role).to.eql('building_admin');",
                  "        pm.expect(data.license.status).to.eql('active');",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå SOUTHSIDE ESTATE REGISTRATION FAILED');",
                  "    console.log('Error:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Register New Building (Prince and Princesses)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{superAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Prince and Princesses\",\n  \"address\": \"Galadimawa, off main road. new site\",\n  \"city\": \"Abuja\",\n  \"state\": \"FCT\",\n  \"country\": \"Nigeria\",\n  \"postalCode\": \"90211\",\n  \"phone\": \"+2348012340000\",\n  \"email\": \"pp@ppestates.com\",\n  \"website\": \"https://ppestates.com\",\n  \"totalLicenses\": 200,\n  \"securityLevel\": 3,\n  \"adminEmail\": \"admin@ppestates.com\",\n  \"adminPassword\": \"ColdDay@1975\",\n  \"adminFirstName\": \"Bilal\",\n  \"adminLastName\": \"Adamu\",\n  \"adminPhone\": \"+2348012345002\",\n  \"adminApartment\": \"ADMIN-001\",\n  \"licenseData\": {\n    \"planType\": \"premium\",\n    \"durationMonths\": 12,\n    \"amount\": 75000,\n    \"currency\": \"NGN\",\n    \"paymentReference\": \"PP_2025_001\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('ppEstateId', data.building.id);",
                  "    pm.environment.set('ppAdminId', data.admin.id);",
                  "    ",
                  "    console.log('‚úÖ PRINCE AND PRINCESSES REGISTERED SUCCESSFULLY');",
                  "    console.log('üè¢ Building:', data.building.name);",
                  "    console.log('üìç Location:', data.building.city + ', ' + data.building.state);",
                  "    console.log('üë§ Admin:', data.admin.first_name + ' ' + data.admin.last_name);",
                  "    console.log('üìß Admin Email:', data.admin.email);",
                  "    console.log('üÜî Building ID:', data.building.id);",
                  "    console.log('üé´ License Key:', data.license.license_key);",
                  "    console.log('üìä Total Licenses:', data.license.total_licenses);",
                  "    ",
                  "    pm.test('Prince and Princesses registered successfully', function () {",
                  "        pm.expect(data.building.name).to.include('Prince');",
                  "        pm.expect(data.admin.role).to.eql('building_admin');",
                  "        pm.expect(data.license.status).to.eql('active');",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå PRINCE AND PRINCESSES REGISTRATION FAILED');",
                  "    console.log('Error:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Get All Buildings (Super Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{superAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings?page=1&limit=10&status=active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    ",
                  "    console.log('\\nüìã ALL REGISTERED BUILDINGS');",
                  "    console.log('üìä Total Buildings:', data.pagination.total);",
                  "    console.log('üìÑ Page:', data.pagination.page, 'of', data.pagination.totalPages);",
                  "    ",
                  "    if (data.buildings && data.buildings.length > 0) {",
                  "        console.log('\\nüè¢ BUILDING LIST:');",
                  "        data.buildings.forEach((building, index) => {",
                  "            console.log(`${index + 1}. ${building.name}`);",
                  "            console.log(`   üìç Location: ${building.city}, ${building.state}`);",
                  "            console.log(`   üìä Status: ${building.is_active ? 'Active' : 'Inactive'}`);",
                  "            console.log(`   üé´ Licenses: ${building.used_licenses}/${building.total_licenses}`);",
                  "            console.log(`   üÜî ID: ${building.id}`);",
                  "            console.log('');",
                  "        });",
                  "    }",
                  "    ",
                  "    pm.test('Buildings retrieved successfully', function () {",
                  "        pm.expect(data.buildings).to.be.an('array');",
                  "        pm.expect(data.pagination.total).to.be.at.least(1);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå FAILED TO GET BUILDINGS');",
                  "    console.log('Error:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Registration",
      "item": [
        {
          "name": "1. Validate Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_id\": \"{{buildingId}}\",\n  \"email\": \"michael.thompson@metroplex.com\",\n  \"phone\": \"+1555-0102\",\n  \"role\": \"building_admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/validate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "validate"]
            }
          }
        },
        {
          "name": "2. Complete Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"michael.thompson@metroplex.com\",\n  \"password\": \"StrongPassword123!\",\n  \"first_name\": \"Michael\",\n  \"last_name\": \"Thompson\",\n  \"phone\": \"+1555-0102\",\n  \"building_id\": \"{{buildingId}}\",\n  \"role\": \"building_admin\",\n  \"apartment_number\": \"A-ADMIN\",\n  \"emergency_contact\": {\n    \"name\": \"Sarah Thompson\",\n    \"phone\": \"+1555-0103\",\n    \"relationship\": \"spouse\"\n  },\n  \"agreed_to_terms\": true,\n  \"email_notifications\": true,\n  \"sms_notifications\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/complete",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "complete"]
            }
          }
        },
        {
          "name": "3. Resident Self-Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_email\": \"admin@dantatagroup.com\",\n  \"email\": \"resident.test@example.com\",\n  \"password\": \"ResidentPass123!\",\n  \"first_name\": \"Alex\",\n  \"last_name\": \"Johnson\",\n  \"phone\": \"+2348012345800\",\n  \"apartment_number\": \"B205\",\n  \"emergency_contact_name\": \"Jane Johnson\",\n  \"emergency_contact_phone\": \"+2348012345801\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/self-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "self-register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('pendingResidentId', data.user.id);",
                  "    console.log('Resident registered, waiting for approval');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Security Guard Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_email\": \"admin@dantatagroup.com\",\n  \"email\": \"security.guard@dantatagroup.com\",\n  \"password\": \"SecurityPass123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Security\",\n  \"phone\": \"+2348012345900\",\n  \"apartment_number\": \"SECURITY-01\",\n  \"emergency_contact_name\": \"Security Supervisor\",\n  \"emergency_contact_phone\": \"+2348012345901\",\n  \"role\": \"security\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/self-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "self-register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('pendingSecurityId', data.user.id);",
                  "    pm.environment.set('securityEmail', data.user.email);",
                  "    console.log('Security guard registered, waiting for approval');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Security Guard 2 Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_email\": \"admin@dantatagroup.com\",\n  \"email\": \"security.night@dantatagroup.com\",\n  \"password\": \"SecurityPass123!\",\n  \"first_name\": \"Sarah\",\n  \"last_name\": \"NightWatch\",\n  \"phone\": \"+2348012345910\",\n  \"apartment_number\": \"SECURITY-02\",\n  \"emergency_contact_name\": \"Security Supervisor\",\n  \"emergency_contact_phone\": \"+2348012345901\",\n  \"role\": \"security\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/self-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "self-register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('pendingSecurity2Id', data.user.id);",
                  "    pm.environment.set('security2Email', data.user.email);",
                  "    console.log('Night security guard registered, waiting for approval');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Enhanced Authentication",
      "item": [
        {
          "name": "1. Enhanced Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@safeguard.com\",\n  \"password\": \"SuperSecure123!\",\n  \"remember_me\": false,\n  \"device_name\": \"Postman Test Client\",\n  \"location\": \"Lagos, Nigeria\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('accessToken', data.accessToken);",
                  "    pm.environment.set('refreshToken', data.refreshToken);",
                  "    pm.environment.set('userId', data.user.id);",
                  "    if (data.sessionId) pm.environment.set('sessionId', data.sessionId);",
                  "    console.log('Login successful, tokens saved');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Building Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@dantatagroup.com\",\n  \"password\": \"AdminPass123!\",\n  \"remember_me\": false,\n  \"device_name\": \"Building Admin Client\",\n  \"location\": \"Lagos, Nigeria\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('buildingAdminToken', data.accessToken);",
                  "    pm.environment.set('buildingAdminId', data.user.id);",
                  "    pm.environment.set('buildingId', data.user.building_id);",
                  "    console.log('Building admin login successful');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Security Guard Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{securityEmail}}\",\n  \"password\": \"SecurityPass123!\",\n  \"remember_me\": false,\n  \"device_name\": \"Security Terminal\",\n  \"location\": \"Gate A - Dantata Building\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('securityToken', data.accessToken);",
                  "    pm.environment.set('securityId', data.user.id);",
                  "    pm.environment.set('securityBuildingId', data.user.building_id);",
                  "    console.log('Security guard login successful');",
                  "} else {",
                  "    console.log('Security guard login failed - may not be approved yet');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Night Security Guard Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{security2Email}}\",\n  \"password\": \"SecurityPass123!\",\n  \"remember_me\": false,\n  \"device_name\": \"Night Security Terminal\",\n  \"location\": \"Gate B - Dantata Building\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('security2Token', data.accessToken);",
                  "    pm.environment.set('security2Id', data.user.id);",
                  "    console.log('Night security guard login successful');",
                  "} else {",
                  "    console.log('Night security guard login failed - may not be approved yet');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Get Security Settings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/security-settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "security-settings"]
            }
          }
        }
      ]
    },
    {
      "name": "Resident Approval Workflow",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "health"]
            }
          }
        },
        {
          "name": "1. Get Pending Approvals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/pending/{{buildingId}}?limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "pending", "{{buildingId}}"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    if (data.approvals && data.approvals.length > 0) {",
                  "        pm.environment.set('approvalId', data.approvals[0].id);",
                  "        console.log('Found approval ID:', data.approvals[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Approve Resident",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true,\n  \"reason\": \"Application meets all requirements\",\n  \"notes\": \"Welcome to the building! Please check your email for next steps.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/{{approvalId}}/process",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "{{approvalId}}", "process"]
            }
          }
        },
        {
          "name": "3. Reject Resident",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": false,\n  \"reason\": \"Incomplete documentation provided\",\n  \"notes\": \"Please resubmit with valid ID documents and proof of residence.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/{{approvalId}}/process",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "{{approvalId}}", "process"]
            }
          }
        },
        {
          "name": "4. Get Approval Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/{{approvalId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "{{approvalId}}"]
            }
          }
        },
        {
          "name": "5. Get Approval Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/dashboard/{{buildingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "dashboard", "{{buildingId}}"]
            }
          }
        },
        {
          "name": "6. Approve Security Guard",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true,\n  \"reason\": \"Security clearance verified\",\n  \"notes\": \"Welcome to the security team! Please report for duty orientation.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/{{approvalId}}/process",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "{{approvalId}}", "process"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get pending security approvals first",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/api/resident-approval/pending/' + pm.environment.get('buildingId'),",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.environment.get('buildingAdminToken')",
                  "    }",
                  "}, function (err, res) {",
                  "    if (res && res.json() && res.json().data && res.json().data.approvals) {",
                  "        const approvals = res.json().data.approvals;",
                  "        const securityApproval = approvals.find(a => a.resident_email === pm.environment.get('securityEmail'));",
                  "        if (securityApproval) {",
                  "            pm.environment.set('approvalId', securityApproval.id);",
                  "            console.log('Found security approval ID:', securityApproval.id);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "7. Approve Night Security Guard",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true,\n  \"reason\": \"Night shift security clearance verified\",\n  \"notes\": \"Welcome to the night security team! Please coordinate with day shift.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/{{approvalId}}/process",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "{{approvalId}}", "process"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get pending security approvals for night guard",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/api/resident-approval/pending/' + pm.environment.get('buildingId'),",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.environment.get('buildingAdminToken')",
                  "    }",
                  "}, function (err, res) {",
                  "    if (res && res.json() && res.json().data && res.json().data.approvals) {",
                  "        const approvals = res.json().data.approvals;",
                  "        const securityApproval = approvals.find(a => a.resident_email === pm.environment.get('security2Email'));",
                  "        if (securityApproval) {",
                  "            pm.environment.set('approvalId', securityApproval.id);",
                  "            console.log('Found night security approval ID:', securityApproval.id);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Bulk Process Approvals",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approval_ids\": [\"{{approvalId}}\"],\n  \"action\": \"approve\",\n  \"reason\": \"Batch approval for verified residents\",\n  \"notes\": \"Welcome to the building!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/bulk-process",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "bulk-process"]
            }
          }
        }
      ]
    },
    {
      "name": "Super Admin Global Access",
      "item": [
        {
          "name": "Get All Pending Approvals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/all/pending?limit=50&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "all", "pending"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Access Control Testing",
      "item": [
        {
          "name": "Building Admin - View Other Building (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{buildingAdminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/pending/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "pending", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return 403 Forbidden', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Should have authorization error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.eql('AUTHORIZATION_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "No Token - Should Fail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/resident-approval/pending/{{buildingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "resident-approval", "pending", "{{buildingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return 401 Unauthorized', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "End-to-End Testing",
      "item": [
        {
          "name": "Test Approved Resident Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"resident.test@example.com\",\n  \"password\": \"ResidentPass123!\",\n  \"device_name\": \"Resident Mobile App\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('residentToken', data.accessToken);",
                  "    pm.test('Resident login successful', function () {",
                  "        pm.expect(data.user.role).to.eql('resident');",
                  "        pm.expect(data.user.is_active).to.eql(true);",
                  "    });",
                  "} else {",
                  "    pm.test('Resident cannot login (not approved yet)', function () {",
                  "        pm.response.to.have.status(401);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Guard Visitor Management",
      "item": [
        {
          "name": "1. Create Visit Entry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"visitor_name\": \"John Smith\",\n  \"visitor_phone\": \"+2348123456789\",\n  \"resident_name\": \"Alex Johnson\",\n  \"apartment_number\": \"B205\",\n  \"purpose\": \"Business meeting\",\n  \"entry_time\": \"2024-01-15T10:30:00Z\",\n  \"identification_type\": \"National ID\",\n  \"identification_number\": \"12345678901\",\n  \"vehicle_info\": {\n    \"plate_number\": \"ABC-123-XY\",\n    \"make\": \"Toyota\",\n    \"model\": \"Camry\",\n    \"color\": \"Blue\"\n  },\n  \"notes\": \"Visitor approved by resident via phone\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/entry",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "entry"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const data = pm.response.json().data;",
                  "    pm.environment.set('visitId', data.visit.id);",
                  "    pm.environment.set('visitorId', data.visitor.id);",
                  "    console.log('Visit created successfully with ID:', data.visit.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Scan QR Code Entry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"qr_code\": \"SAFEGUARD_VISIT_12345678-abcd-4321-9876-123456789abc\",\n  \"entry_gate\": \"Gate A - Main Entrance\",\n  \"visitor_verification\": {\n    \"name_matches\": true,\n    \"id_verified\": true,\n    \"photo_taken\": true\n  },\n  \"notes\": \"QR code verified successfully\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/qr-scan",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "qr-scan"]
            }
          }
        },
        {
          "name": "3. Record Visit Exit",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"visit_id\": \"{{visitId}}\",\n  \"exit_time\": \"2024-01-15T14:30:00Z\",\n  \"exit_gate\": \"Gate A - Main Entrance\",\n  \"notes\": \"Normal exit, visitor satisfied with visit\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/exit",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "exit"]
            }
          }
        },
        {
          "name": "4. Get Active Visits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "active"]
            }
          }
        },
        {
          "name": "5. Get Today's Visit Log",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/logs/today",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "logs", "today"]
            }
          }
        },
        {
          "name": "6. Search Visitor History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/search?q=John%20Smith&date_from=2024-01-01&date_to=2024-01-31",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "John Smith"
                },
                {
                  "key": "date_from",
                  "value": "2024-01-01"
                },
                {
                  "key": "date_to",
                  "value": "2024-01-31"
                }
              ]
            }
          }
        },
        {
          "name": "7. Report Security Incident",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{securityToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"incident_type\": \"unauthorized_access\",\n  \"severity\": \"medium\",\n  \"location\": \"Gate A - Main Entrance\",\n  \"description\": \"Individual attempted to enter without proper visitor pass\",\n  \"visitor_involved\": {\n    \"name\": \"Unknown Person\",\n    \"description\": \"Male, approximately 30 years old, wearing blue jacket\"\n  },\n  \"action_taken\": \"Denied entry, asked to contact resident directly\",\n  \"witnesses\": [],\n  \"follow_up_required\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/incident",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "incident"]
            }
          }
        },
        {
          "name": "8. Night Guard - Hand Over Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{security2Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shift_end\": \"2024-01-16T06:00:00Z\",\n  \"visitors_count\": {\n    \"entered\": 0,\n    \"exited\": 3,\n    \"currently_inside\": 5\n  },\n  \"incidents\": [],\n  \"maintenance_issues\": [\n    {\n      \"location\": \"Gate B - Secondary Entrance\",\n      \"issue\": \"Lighting fixture needs replacement\",\n      \"priority\": \"medium\"\n    }\n  ],\n  \"notes\": \"Quiet night shift. All exits properly logged. Building secure.\",\n  \"handover_to\": \"Day Security Team\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/visitors/security/handover",
              "host": ["{{baseUrl}}"],
              "path": ["api", "visitors", "security", "handover"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default base URL if not set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:4500');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for all requests",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper structure', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "    pm.expect(jsonData).to.have.property('timestamp');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4500"
    },
    {
      "key": "buildingId",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "buildingAdminToken",
      "value": ""
    },
    {
      "key": "residentToken", 
      "value": ""
    },
    {
      "key": "approvalId",
      "value": ""
    },
    {
      "key": "pendingResidentId",
      "value": ""
    },
    {
      "key": "securityToken",
      "value": ""
    },
    {
      "key": "security2Token",
      "value": ""
    },
    {
      "key": "securityEmail",
      "value": ""
    },
    {
      "key": "security2Email",
      "value": ""
    },
    {
      "key": "securityId",
      "value": ""
    },
    {
      "key": "security2Id",
      "value": ""
    },
    {
      "key": "pendingSecurityId",
      "value": ""
    },
    {
      "key": "pendingSecurity2Id",
      "value": ""
    },
    {
      "key": "visitId",
      "value": ""
    },
    {
      "key": "visitorId",
      "value": ""
    }
  ]
}