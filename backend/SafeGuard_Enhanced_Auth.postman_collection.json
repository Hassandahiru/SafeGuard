{
  "info": {
    "name": "SafeGuard Enhanced Authentication",
    "description": "Complete test collection for SafeGuard's enhanced authentication and user registration system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "User Registration",
      "item": [
        {
          "name": "1. Validate Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_id\": \"{{buildingId}}\",\n  \"email\": \"newuser@safeguard.com\",\n  \"phone\": \"+2348012345678\",\n  \"role\": \"building_admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/validate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "validate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration validation successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('canRegister');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Complete Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@safeguard.com\",\n  \"password\": \"NewUserPass123!\",\n  \"first_name\": \"New\",\n  \"last_name\": \"User\",\n  \"phone\": \"+2348012345678\",\n  \"building_id\": \"{{buildingId}}\",\n  \"role\": \"building_admin\",\n  \"apartment_number\": \"A101\",\n  \"emergency_contact\": {\n    \"name\": \"Emergency Contact\",\n    \"phone\": \"+2348012345680\",\n    \"relationship\": \"spouse\"\n  },\n  \"agreed_to_terms\": true,\n  \"email_notifications\": true,\n  \"sms_notifications\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/complete",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "complete"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    ",
                  "    // Save user ID for future tests",
                  "    if (jsonData.data.user.id) {",
                  "        pm.environment.set('userId', jsonData.data.user.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Resident Self Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"resident@safeguard.com\",\n  \"password\": \"SecureResident123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"phone\": \"+2348012345679\",\n  \"building_code\": \"TB001\",\n  \"apartment_number\": \"B205\",\n  \"emergency_contact_name\": \"Jane Doe\",\n  \"emergency_contact_phone\": \"+2348012345681\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/self-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "self-register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Self registration submitted\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.equal('pending_approval');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Enhanced Authentication",
      "item": [
        {
          "name": "1. Enhanced Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@safeguard.com\",\n  \"password\": \"TestPassword123!\",\n  \"remember_me\": false,\n  \"device_name\": \"Postman Test Client\",\n  \"location\": \"Lagos, Nigeria\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "    ",
                  "    // Save tokens for authenticated requests",
                  "    pm.environment.set('accessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.data.refreshToken);",
                  "    if (jsonData.data.sessionId) {",
                  "        pm.environment.set('sessionId', jsonData.data.sessionId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Get Security Settings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/security-settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "security-settings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Security settings retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('security_score');",
                  "    pm.expect(jsonData.data).to.have.property('recommendations');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Get Active Sessions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "sessions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Active sessions retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('sessions');",
                  "    pm.expect(jsonData.data).to.have.property('totalSessions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"TestPassword123!\",\n  \"new_password\": \"NewTestPassword456!\",\n  \"logout_other_sessions\": true,\n  \"require_reauth_for_sensitive_actions\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "change-password"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Password changed successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('passwordStrength');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refreshToken}}\",\n  \"device_fingerprint\": \"postman-test-fingerprint\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Token refreshed successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    ",
                  "    // Update access token",
                  "    pm.environment.set('accessToken', jsonData.data.accessToken);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Enhanced Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"logout_all_devices\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Logout successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    ",
                  "    // Clear tokens",
                  "    pm.environment.unset('accessToken');",
                  "    pm.environment.unset('refreshToken');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Building & Admin Management",
      "item": [
        {
          "name": "1. Initial System Setup",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Building Complex\",\n  \"address\": \"123 Main Street, Victoria Island\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos State\",\n  \"building_code\": \"TB001\",\n  \"total_licenses\": 250,\n  \"adminEmail\": \"superadmin@safeguard.com\",\n  \"adminPassword\": \"SuperSecure123!\",\n  \"adminFirstName\": \"Super\",\n  \"adminLastName\": \"Admin\",\n  \"adminPhone\": \"+2348012345600\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/initial-setup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "initial-setup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Initial setup successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('superAdmin');",
                  "    pm.expect(jsonData.data).to.have.property('building');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Register New Building",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New Building Complex\",\n  \"address\": \"456 Business District, Victoria Island\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos State\",\n  \"country\": \"Nigeria\",\n  \"totalLicenses\": 150,\n  \"adminEmail\": \"admin@newbuilding.com\",\n  \"adminPassword\": \"BuildingAdmin123!\",\n  \"adminFirstName\": \"Building\",\n  \"adminLastName\": \"Administrator\",\n  \"adminPhone\": \"+2348012345601\",\n  \"adminApartment\": \"ADMIN-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Building registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('building');",
                  "    pm.expect(jsonData.data).to.have.property('admin');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Get All Buildings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "buildings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Buildings retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('buildings');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Register Building Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newadmin@safeguard.com\",\n  \"password\": \"NewAdmin123!\",\n  \"first_name\": \"New\",\n  \"last_name\": \"Admin\",\n  \"phone\": \"+2348012345602\",\n  \"building_id\": \"{{buildingId}}\",\n  \"apartment_number\": \"ADMIN-01\",\n  \"admin_permissions\": [\"manage_users\", \"view_analytics\"],\n  \"send_welcome_email\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/building-admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "building-admin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Building admin registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('admin');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Register Security Personnel",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"security@safeguard.com\",\n  \"password\": \"SecurityGuard123!\",\n  \"first_name\": \"Security\",\n  \"last_name\": \"Officer\",\n  \"phone\": \"+2348012345603\",\n  \"building_id\": \"{{buildingId}}\",\n  \"security_level\": 2,\n  \"shift_schedule\": [\"morning\", \"evening\"],\n  \"security_clearance\": \"intermediate\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/security",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "security"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Security registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('security');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Registration Management",
      "item": [
        {
          "name": "1. Get Registration Templates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/registration/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "templates"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Templates retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('csv_headers');",
                  "    pm.expect(jsonData.data).to.have.property('validation_rules');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Validate Bulk Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_id\": \"{{buildingId}}\",\n  \"users\": [\n    {\n      \"email\": \"bulk1@test.com\",\n      \"first_name\": \"Bulk\",\n      \"last_name\": \"User1\",\n      \"phone\": \"+2348012345690\",\n      \"role\": \"resident\"\n    },\n    {\n      \"email\": \"bulk2@test.com\",\n      \"first_name\": \"Bulk\",\n      \"last_name\": \"User2\",\n      \"phone\": \"+2348012345691\",\n      \"role\": \"resident\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/validate-bulk",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "validate-bulk"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Bulk validation successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('valid_users');",
                  "    pm.expect(jsonData.data).to.have.property('license_requirements');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Bulk User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"building_id\": \"{{buildingId}}\",\n  \"users\": [\n    {\n      \"email\": \"resident1@building.com\",\n      \"first_name\": \"Resident\",\n      \"last_name\": \"One\",\n      \"phone\": \"+2348012345610\",\n      \"apartment_number\": \"101\",\n      \"role\": \"resident\"\n    },\n    {\n      \"email\": \"resident2@building.com\",\n      \"first_name\": \"Resident\",\n      \"last_name\": \"Two\",\n      \"phone\": \"+2348012345611\",\n      \"apartment_number\": \"102\",\n      \"role\": \"resident\"\n    }\n  ],\n  \"default_password\": \"TempPassword123!\",\n  \"send_welcome_emails\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "bulk"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Bulk registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('successful');",
                  "    pm.expect(jsonData.data).to.have.property('failed');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Get Registration Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/registration/stats/{{buildingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "stats", "{{buildingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statistics retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('userCounts');",
                  "    pm.expect(jsonData.data).to.have.property('licenseUtilization');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "1. Invalid Login Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@safeguard.com\",\n  \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid credentials rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.equal('AUTHENTICATION_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Weak Password Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"weak@test.com\",\n  \"password\": \"123\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"phone\": \"+2348012345699\",\n  \"building_id\": \"{{buildingId}}\",\n  \"agreed_to_terms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registration/complete",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registration", "complete"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Weak password rejected\", function () {",
                  "    pm.response.to.have.status(422);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Unauthorized Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/enhanced/security-settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "enhanced", "security-settings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized access rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "console.log('Running test against:', pm.environment.get('baseUrl'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has timestamp', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('timestamp');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4500",
      "type": "string"
    },
    {
      "key": "buildingId",
      "value": "550e8400-e29b-41d4-a716-446655440000",
      "type": "string"
    }
  ]
}