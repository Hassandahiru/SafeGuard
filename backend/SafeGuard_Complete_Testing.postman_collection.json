{
	"info": {
		"_postman_id": "safeguard-complete-2024",
		"name": "SafeGuard Complete API Testing",
		"description": "Comprehensive testing collection for SafeGuard visitor management system with admin approval workflow.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "safeguard-api-v2024"
	},
	"item": [
		{
			"name": "0. Health & System Info",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "API Information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api",
							"host": ["{{baseUrl}}"],
							"path": ["api"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Initial System Setup",
			"item": [
				{
					"name": "Create Initial Building & Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data) {",
									"        pm.environment.set('buildingId', jsonData.data.building.id);",
									"        pm.environment.set('superAdminId', jsonData.data.superAdmin.id);",
									"        pm.environment.set('buildingEmail', jsonData.data.building.email);",
									"        console.log('Building ID saved:', jsonData.data.building.id);",
									"        console.log('Super Admin ID saved:', jsonData.data.superAdmin.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Metroplex Towers\",\n  \"email\": \"metroplex@safeguard.com\",\n  \"address\": \"1001 Victoria Island Boulevard, Lagos\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos State\",\n  \"country\": \"Nigeria\",\n  \"postal_code\": \"101241\",\n  \"total_licenses\": 300,\n  \"adminEmail\": \"superadmin@metroplex.com\",\n  \"adminPassword\": \"SuperSecure2024!\",\n  \"adminFirstName\": \"Sarah\",\n  \"adminLastName\": \"Johnson\",\n  \"adminPhone\": \"+2348012345000\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/initial-setup",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "initial-setup"]
						}
					},
					"response": []
				},
				{
					"name": "Create Second Building",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data) {",
									"        pm.environment.set('secondBuildingId', jsonData.data.building.id);",
									"        pm.environment.set('secondBuildingAdminId', jsonData.data.admin.id);",
									"        console.log('Second Building ID saved:', jsonData.data.building.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Paradise Gardens Estate\",\n  \"email\": \"paradise@safeguard.com\",\n  \"address\": \"456 Lekki Phase 1, Lagos\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos State\",\n  \"country\": \"Nigeria\",\n  \"postal_code\": \"101245\",\n  \"total_licenses\": 200,\n  \"adminEmail\": \"admin@paradise.com\",\n  \"adminPassword\": \"ParadiseAdmin2024!\",\n  \"adminFirstName\": \"Michael\",\n  \"adminLastName\": \"Thompson\",\n  \"adminPhone\": \"+2348012345001\",\n  \"adminApartment\": \"ADMIN-001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/buildings",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "buildings"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Authentication",
			"item": [
				{
					"name": "Super Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.accessToken) {",
									"        pm.environment.set('accessToken', jsonData.data.accessToken);",
									"        pm.environment.set('refreshToken', jsonData.data.refreshToken);",
									"        pm.environment.set('sessionId', jsonData.data.sessionId);",
									"        pm.environment.set('currentUserId', jsonData.data.user.id);",
									"        console.log('Super Admin logged in successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"superadmin@metroplex.com\",\n  \"password\": \"SuperSecure2024!\",\n  \"remember_me\": false,\n  \"device_name\": \"Postman Test Client\",\n  \"location\": \"Lagos, Nigeria\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Building Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.accessToken) {",
									"        pm.environment.set('buildingAdminToken', jsonData.data.accessToken);",
									"        pm.environment.set('buildingAdminId', jsonData.data.user.id);",
									"        console.log('Building Admin logged in successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@paradise.com\",\n  \"password\": \"ParadiseAdmin2024!\",\n  \"remember_me\": false,\n  \"device_name\": \"Postman Building Admin\",\n  \"location\": \"Lagos, Nigeria\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/security-settings",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "security-settings"]
						}
					},
					"response": []
				},
				{
					"name": "Get Active Sessions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/sessions",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "sessions"]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.accessToken) {",
									"        pm.environment.set('accessToken', jsonData.data.accessToken);",
									"        console.log('Token refreshed successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refreshToken}}\",\n  \"device_fingerprint\": \"postman-test-fingerprint\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/refresh",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "refresh"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. User Registration",
			"item": [
				{
					"name": "Validate Registration Eligibility",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"building_id\": \"{{buildingId}}\",\n  \"email\": \"resident1@metroplex.com\",\n  \"phone\": \"+2348012345100\",\n  \"role\": \"resident\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/validate",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "validate"]
						}
					},
					"response": []
				},
				{
					"name": "Complete Resident Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.user) {",
									"        pm.environment.set('residentId', jsonData.data.user.id);",
									"        pm.environment.set('residentToken', jsonData.data.token);",
									"        console.log('Resident registered:', jsonData.data.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"resident1@metroplex.com\",\n  \"password\": \"ResidentSecure2024!\",\n  \"first_name\": \"David\",\n  \"last_name\": \"Wilson\",\n  \"phone\": \"+2348012345100\",\n  \"building_id\": \"{{buildingId}}\",\n  \"role\": \"resident\",\n  \"apartment_number\": \"A-205\",\n  \"emergency_contact\": {\n    \"name\": \"Emma Wilson\",\n    \"phone\": \"+2348012345101\",\n    \"relationship\": \"spouse\"\n  },\n  \"agreed_to_terms\": true,\n  \"email_notifications\": true,\n  \"sms_notifications\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/complete",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "complete"]
						}
					},
					"response": []
				},
				{
					"name": "Self-Register Resident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.user) {",
									"        pm.environment.set('selfRegisteredId', jsonData.data.user.id);",
									"        console.log('Self-registered user:', jsonData.data.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"selfregister@metroplex.com\",\n  \"password\": \"SelfRegister2024!\",\n  \"first_name\": \"Lisa\",\n  \"last_name\": \"Anderson\",\n  \"phone\": \"+2348012345102\",\n  \"building_email\": \"superadmin@metroplex.com\",\n  \"apartment_number\": \"B-301\",\n  \"emergency_contact_name\": \"James Anderson\",\n  \"emergency_contact_phone\": \"+2348012345103\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/self-register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "self-register"]
						}
					},
					"response": []
				},
				{
					"name": "Register Security Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.user) {",
									"        pm.environment.set('securityStaffId', jsonData.data.user.id);",
									"        pm.environment.set('securityToken', jsonData.data.token);",
									"        console.log('Security staff registered:', jsonData.data.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{buildingAdminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"security@metroplex.com\",\n  \"password\": \"SecurityGuard2024!\",\n  \"first_name\": \"Robert\",\n  \"last_name\": \"Martinez\",\n  \"phone\": \"+2348012345104\",\n  \"building_id\": \"{{buildingId}}\",\n  \"shift\": \"day\",\n  \"badge_number\": \"SEC001\",\n  \"emergency_contact_name\": \"Maria Martinez\",\n  \"emergency_contact_phone\": \"+2348012345105\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/security",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "security"]
						}
					},
					"response": []
				},
				{
					"name": "Get Registration Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/registration/stats/{{buildingId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "stats", "{{buildingId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Get Registration Templates",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/registration/templates",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "templates"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Admin Approval Workflow",
			"item": [
				{
					"name": "Register Building Admin (Needs Approval)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data) {",
									"        pm.environment.set('pendingAdminId', jsonData.data.admin.id);",
									"        pm.environment.set('approvalRequestId', jsonData.data.approval_request.id);",
									"        console.log('Pending admin created:', jsonData.data.admin.id);",
									"        console.log('Approval request ID:', jsonData.data.approval_request.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"building_email\": \"metroplex@safeguard.com\",\n  \"email\": \"newadmin@metroplex.com\",\n  \"password\": \"NewAdminSecure2024!\",\n  \"confirmPassword\": \"NewAdminSecure2024!\",\n  \"first_name\": \"Jennifer\",\n  \"last_name\": \"Davis\",\n  \"phone\": \"+2348012345200\",\n  \"apartment_number\": \"ADMIN-002\",\n  \"admin_permissions\": [\"manage_visitors\", \"view_reports\", \"manage_residents\"],\n  \"send_welcome_email\": true,\n  \"notes\": \"Experienced property manager with 5 years in residential management\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/register-building-admin",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "register-building-admin"]
						}
					},
					"response": []
				},
				{
					"name": "Search Buildings by Email",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/buildings/search?email_term=metroplex&limit=5",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "buildings", "search"],
							"query": [
								{
									"key": "email_term",
									"value": "metroplex"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Super Admin Dashboard",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/dashboard/notifications",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "dashboard", "notifications"]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending Approvals",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/pending?limit=20&offset=0",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "pending"],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Approval Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/{{approvalRequestId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "{{approvalRequestId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Approve Admin Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success) {",
									"        console.log('Admin approved successfully');",
									"        pm.environment.set('approvedAdminId', jsonData.data.admin_user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"approved\": true,\n  \"reason\": \"Application meets all requirements. Experienced property manager with excellent references.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/{{approvalRequestId}}/process",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "{{approvalRequestId}}", "process"]
						}
					},
					"response": []
				},
				{
					"name": "Register Another Admin (To Reject)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data) {",
									"        pm.environment.set('rejectAdminId', jsonData.data.admin.id);",
									"        pm.environment.set('rejectApprovalId', jsonData.data.approval_request.id);",
									"        console.log('Admin to reject created:', jsonData.data.admin.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"building_email\": \"paradise@safeguard.com\",\n  \"email\": \"badactor@example.com\",\n  \"password\": \"BadActor2024!\",\n  \"confirmPassword\": \"BadActor2024!\",\n  \"first_name\": \"Suspicious\",\n  \"last_name\": \"Person\",\n  \"phone\": \"+2348012345999\",\n  \"apartment_number\": \"TEMP-001\",\n  \"admin_permissions\": [\"manage_visitors\"],\n  \"send_welcome_email\": false,\n  \"notes\": \"Incomplete application with questionable references\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/register-building-admin",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "register-building-admin"]
						}
					},
					"response": []
				},
				{
					"name": "Reject Admin Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success) {",
									"        console.log('Admin rejected successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"approved\": false,\n  \"reason\": \"Application does not meet our security standards. Insufficient documentation and questionable references provided.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/{{rejectApprovalId}}/process",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "{{rejectApprovalId}}", "process"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Visitor Management",
			"item": [
				{
					"name": "Create Single Visitor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.visitor) {",
									"        pm.environment.set('visitorId', jsonData.data.visitor.id);",
									"        pm.environment.set('qrCode', jsonData.data.qr_code);",
									"        console.log('Visitor created:', jsonData.data.visitor.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Smith\",\n  \"phone\": \"+2348012345300\",\n  \"email\": \"john.smith@example.com\",\n  \"id_number\": \"A12345678\",\n  \"purpose\": \"Business meeting\",\n  \"expected_arrival\": \"2024-08-10T14:00:00Z\",\n  \"expected_departure\": \"2024-08-10T16:00:00Z\",\n  \"vehicle_details\": {\n    \"plate_number\": \"LAG-123-XY\",\n    \"make\": \"Toyota\",\n    \"model\": \"Camry\",\n    \"color\": \"Silver\"\n  },\n  \"special_instructions\": \"Please direct to main lobby. Will be carrying laptop bag.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitors"]
						}
					},
					"response": []
				},
				{
					"name": "Create Group Visitors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.visitors) {",
									"        pm.environment.set('groupVisitorIds', JSON.stringify(jsonData.data.visitors.map(v => v.id)));",
									"        console.log('Group visitors created:', jsonData.data.visitors.length);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"purpose\": \"Birthday party celebration\",\n  \"expected_arrival\": \"2024-08-12T18:00:00Z\",\n  \"expected_departure\": \"2024-08-12T23:00:00Z\",\n  \"special_instructions\": \"Party guests - please direct to apartment A-205\",\n  \"visitors\": [\n    {\n      \"name\": \"Alice Johnson\",\n      \"phone\": \"+2348012345301\",\n      \"email\": \"alice@example.com\",\n      \"relationship\": \"friend\"\n    },\n    {\n      \"name\": \"Bob Williams\",\n      \"phone\": \"+2348012345302\",\n      \"email\": \"bob@example.com\",\n      \"relationship\": \"friend\"\n    },\n    {\n      \"name\": \"Carol Brown\",\n      \"phone\": \"+2348012345303\",\n      \"email\": \"carol@example.com\",\n      \"relationship\": \"family\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitors/group",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitors", "group"]
						}
					},
					"response": []
				},
				{
					"name": "Get All Visitors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/visitors?status=all&limit=20&offset=0",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitors"],
							"query": [
								{
									"key": "status",
									"value": "all"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Visitor",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"purpose\": \"Updated business meeting with presentations\",\n  \"expected_arrival\": \"2024-08-10T13:30:00Z\",\n  \"expected_departure\": \"2024-08-10T17:30:00Z\",\n  \"special_instructions\": \"Updated: Will need access to conference room on 2nd floor\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitors/{{visitorId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitors", "{{visitorId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Visitor",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Meeting cancelled due to scheduling conflict\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitors/{{visitorId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitors", "{{visitorId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Frequent Visitors",
			"item": [
				{
					"name": "Add Frequent Visitor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.frequent_visitor) {",
									"        pm.environment.set('frequentVisitorId', jsonData.data.frequent_visitor.id);",
									"        console.log('Frequent visitor added:', jsonData.data.frequent_visitor.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Santos\",\n  \"phone\": \"+2348012345400\",\n  \"email\": \"maria.santos@example.com\",\n  \"relationship\": \"Housekeeper\",\n  \"visit_frequency\": \"weekly\",\n  \"preferred_time\": \"morning\",\n  \"notes\": \"Regular cleaning service every Wednesday morning\",\n  \"is_service_provider\": true,\n  \"company_name\": \"Clean & Fresh Services\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/frequent-visitors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "frequent-visitors"]
						}
					},
					"response": []
				},
				{
					"name": "Get Frequent Visitors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/frequent-visitors?category=all&limit=20",
							"host": ["{{baseUrl}}"],
							"path": ["api", "frequent-visitors"],
							"query": [
								{
									"key": "category",
									"value": "all"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Quick Invite Frequent Visitor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.visitor) {",
									"        pm.environment.set('quickInviteVisitorId', jsonData.data.visitor.id);",
									"        console.log('Quick invite visitor created:', jsonData.data.visitor.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"expected_arrival\": \"2024-08-11T09:00:00Z\",\n  \"expected_departure\": \"2024-08-11T12:00:00Z\",\n  \"purpose\": \"Weekly cleaning service\",\n  \"special_instructions\": \"Regular weekly cleaning - has building access card\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/frequent-visitors/{{frequentVisitorId}}/quick-invite",
							"host": ["{{baseUrl}}"],
							"path": ["api", "frequent-visitors", "{{frequentVisitorId}}", "quick-invite"]
						}
					},
					"response": []
				},
				{
					"name": "Update Frequent Visitor",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"+2348012345401\",\n  \"visit_frequency\": \"bi-weekly\",\n  \"preferred_time\": \"afternoon\",\n  \"notes\": \"Updated: Now comes every two weeks on Wednesday afternoons\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/frequent-visitors/{{frequentVisitorId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "frequent-visitors", "{{frequentVisitorId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Remove Frequent Visitor",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/frequent-visitors/{{frequentVisitorId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "frequent-visitors", "{{frequentVisitorId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Visitor Bans",
			"item": [
				{
					"name": "Ban Visitor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.ban) {",
									"        pm.environment.set('visitorBanId', jsonData.data.ban.id);",
									"        console.log('Visitor banned:', jsonData.data.ban.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unwanted Person\",\n  \"phone\": \"+2348012345500\",\n  \"reason\": \"Aggressive behavior and harassment of residents\",\n  \"severity\": \"high\",\n  \"banned_until\": \"2024-12-31T23:59:59Z\",\n  \"additional_details\": \"Individual was verbally abusive to security staff and made threats to residents. Police report filed.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitor-bans",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitor-bans"]
						}
					},
					"response": []
				},
				{
					"name": "Check Visitor Ban Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/visitor-bans/check?phone=%2B2348012345500",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitor-bans", "check"],
							"query": [
								{
									"key": "phone",
									"value": "%2B2348012345500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Banned Visitors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/visitor-bans?active_only=true&limit=20&offset=0",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitor-bans"],
							"query": [
								{
									"key": "active_only",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ban Details",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Updated: Aggressive behavior, harassment, and property damage. Security footage available.\",\n  \"severity\": \"extreme\",\n  \"banned_until\": \"2025-12-31T23:59:59Z\",\n  \"additional_details\": \"Ban extended due to additional incident reports from other residents.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitor-bans/{{visitorBanId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitor-bans", "{{visitorBanId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Unban Visitor",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{residentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Situation resolved after mediation. Visitor has apologized and agreed to respectful behavior.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/visitor-bans/{{visitorBanId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "visitor-bans", "{{visitorBanId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Admin Operations",
			"item": [
				{
					"name": "Get Building Analytics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/analytics?building_id={{buildingId}}&period=monthly&start_date=2024-07-01&end_date=2024-08-31",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "analytics"],
							"query": [
								{
									"key": "building_id",
									"value": "{{buildingId}}"
								},
								{
									"key": "period",
									"value": "monthly"
								},
								{
									"key": "start_date",
									"value": "2024-07-01"
								},
								{
									"key": "end_date",
									"value": "2024-08-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Buildings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/buildings?include_stats=true&limit=50",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "buildings"],
							"query": [
								{
									"key": "include_stats",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Building Residents",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{buildingAdminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/buildings/{{buildingId}}/residents?include_inactive=false&limit=100",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "buildings", "{{buildingId}}", "residents"],
							"query": [
								{
									"key": "include_inactive",
									"value": "false"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Building Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{buildingAdminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security_level\": \"high\",\n  \"settings\": {\n    \"visitor_approval_required\": true,\n    \"max_visitors_per_resident\": 5,\n    \"visitor_access_hours\": {\n      \"start\": \"06:00\",\n      \"end\": \"22:00\"\n    },\n    \"emergency_contact\": \"+2348012345911\",\n    \"notifications\": {\n      \"email_admins_on_emergency\": true,\n      \"sms_security_on_incidents\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/buildings/{{buildingId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin", "buildings", "{{buildingId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. Error Scenarios",
			"item": [
				{
					"name": "Invalid Login Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"superadmin@metroplex.com\",\n  \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"incomplete@test.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/complete",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "complete"]
						}
					},
					"response": []
				},
				{
					"name": "Weak Password Validation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"weakpassword@test.com\",\n  \"password\": \"123\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"phone\": \"+2348012345999\",\n  \"building_id\": \"{{buildingId}}\",\n  \"agreed_to_terms\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/registration/complete",
							"host": ["{{baseUrl}}"],
							"path": ["api", "registration", "complete"]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Access (No Token)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/security-settings",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "security-settings"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Building Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"building_email\": \"nonexistent@building.com\",\n  \"email\": \"admin@test.com\",\n  \"password\": \"ValidPassword2024!\",\n  \"confirmPassword\": \"ValidPassword2024!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"Admin\",\n  \"phone\": \"+2348012345888\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin-approval/register-building-admin",
							"host": ["{{baseUrl}}"],
							"path": ["api", "admin-approval", "register-building-admin"]
						}
					},
					"response": []
				},
				{
					"name": "Rate Limiting Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. Cleanup",
			"item": [
				{
					"name": "Logout Current Session",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logout_all_devices\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/enhanced/logout",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "enhanced", "logout"]
						}
					},
					"response": []
				},
				{
					"name": "Clear Environment Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear sensitive tokens and IDs",
									"pm.environment.set('accessToken', '');",
									"pm.environment.set('refreshToken', '');",
									"pm.environment.set('residentToken', '');",
									"pm.environment.set('buildingAdminToken', '');",
									"pm.environment.set('securityToken', '');",
									"console.log('Environment variables cleared for security');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Request to:', pm.request.url);",
					"",
					"// Check if authentication is required",
					"const authRequired = pm.request.url.toString().includes('/api/') && ",
					"                     !pm.request.url.toString().includes('/login') &&",
					"                     !pm.request.url.toString().includes('/initial-setup') &&",
					"                     !pm.request.url.toString().includes('/register-building-admin') &&",
					"                     !pm.request.url.toString().includes('/buildings/search');",
					"",
					"if (authRequired && !pm.request.headers.has('Authorization')) {",
					"    const token = pm.environment.get('accessToken');",
					"    if (!token) {",
					"        console.warn('⚠️  No access token found. Please login first.');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test('Response has correct content type', function () {",
					"    if (pm.response.code !== 404) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});",
					"",
					"pm.test('Response structure is valid', function () {",
					"    if (pm.response.code !== 404) {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('success');",
					"        pm.expect(jsonData).to.have.property('timestamp');",
					"    }",
					"});",
					"",
					"// Log response for debugging",
					"if (pm.response.code >= 400) {",
					"    console.error('❌ Error Response:', pm.response.json());",
					"} else {",
					"    console.log('✅ Success Response:', pm.response.code);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "collectionVersion",
			"value": "2.0.0",
			"type": "string"
		},
		{
			"key": "apiVersion",
			"value": "v1",
			"type": "string"
		}
	]
}